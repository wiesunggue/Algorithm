# 다익스트라 간단한 팁들

# 실제 경로 계산하기
# 그래프를 탐색하는 과정에서 스패닝 트리를 계산한 후, 스패닝 트리를 거슬러 올라가며 경로를 찾으면 됨

# O(VlogV) 다익스트라 구현하기
# 중복으로 들어가는 입력을 들어가지 않도록 만들면 되나, 실제로는 더 느린 경우가 많아서 활용하지 않음

# 우선순위큐를 활용하지 않는 다익스트라
# 정점의 수가 적거나, 간선의 수가 굉장히 많은 경우 활용할 수 있음
# 이 경우에는 O(V^2+E)

# 예제
# 1. 신호라우팅 문제
# 경로에 대해서 노이즈가 곱으로 정의될 때 노이즈를 최소화 하는 경로에서 몇배 증가하는지 찾는 문제
# 곱으로 정의되는 노이즈를 로그를 활용해서 합으로 바꿔주면 됨

# 2. 소방차 문제
# m개의 소방서로부터 각 지역마다 최단거리의 합을 계산하는 문제
# 가중치 0 인 노드들 소방서마다 이어줘서 문제를 해결하면 됨

# 3. 철인 N종 경기
# 운동 경기에서 두 선수가 걸리는 시간이 주어질 때 운동경기를 통해 두 선수가 비기는 경우, 최소 완주 시간을 찾는 문제
#       A   B
# 달리기 20  10
# 수영   10  20

# 운동경기는 여러번 진행해도 됨
# 운동 시간은 200분 이내


# -200부터 200까지 저장하는 A-B의 상대시간을 저장하는 배열을 만들고, 거기에 A가 소요하는 시간을 가중치로 저장하자
# 이렇게 하여 0이 되는 최소의 A시간을 다익스트라로 계산하면 됨

# 벨만 포드의 최단경로 알고리즘
# 최단 경로를 찾는데 음수 간선이 있는 경우에도 정당성을 보장받을 수 있는 방법
# 최단거리의 상한을 저장하는 배열을 만들어서 오차를 줄여나감

# dist[u], dist[v]는 시작저에서의 최단거리, w(u,v) u,v 사이의 최단거리라고 할 때
# dist[v] <= dist[u]+w(u,v) 는 항상 성립한다
# 해당 부등식을 만족하지 못하면 최단거리라는 가정에 모순이 발생

# 따라서 알려진 최단거리 dist[v] < dist[u] + w(u,v) 라면 dist[v]를 업데이트 할 수 있음
# 이 과정을 완화라고 부름

# dist[u]가 최단거리이고, w(u,v)가 최단거리라면 dist[v]를 결정적으로 계산할 수 있음


